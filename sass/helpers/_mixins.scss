// VENDOR Prefix

// keyframes mixin
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @-o-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}
// Custom scrollbar mixin
@mixin scrollbars($size, $foreground-color, $background-color: mix($foreground-color, white, 25%)) {
  ::-webkit-scrollbar {
    width: $size;
    height: $size;
  }

  ::-webkit-scrollbar-thumb {
    background: $foreground-color;
  }

  ::-webkit-scrollbar-track {
    background: $background-color;
  }

  // For Internet Explorer
  body {
    scrollbar-face-color: $foreground-color;
    scrollbar-track-color: $background-color;
  }
}

//PlaceHolder mixin

@mixin placeholder($color: $custom-placeholder) {
  &::-webkit-input-placeholder {
    color: $color;
  }
  &:-moz-placeholder {
    color: $color;
  }
  &::-moz-placeholder {
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
}

// Selection mixin
$prefixes: ("-moz-", "-webkit-", "-o-", "-ms-", "");
@mixin selection($color, $background) {
  @each $prefix in $prefixes {
    ::#{$prefix}selection {
      color: $color;
      background: $background;
    }
  }
}

// Flexbox
//--flexbox display
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}
//--flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
  -moz-justify-content: $justify;
  -ms-justify-content: $justify;
  justify-content: $justify;
  -ms-flex-pack: $justify;
}
//--flex-start | flex-end | center | baseline | stretch
@mixin align-items($align) {
  -webkit-align-items: $align;
  -moz-align-items: $align;
  -ms-align-items: $align;
  align-items: $align;
}
//--row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
  -moz-flex-direction: $direction;
  -ms-flex-direction: $direction;
  flex-direction: $direction;
}
//--nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
  -moz-flex-wrap: $wrap;
  -ms-flex-wrap: $wrap;
  flex-wrap: $wrap;
}

// Linear-gradient
@mixin linear-gradient($angle, $gradient1, $gradient2) {
  background-color: $gradient2; /* Fallback Color */
  background-image: -webkit-gradient(linear, $angle, from($gradient1), to($gradient2)); /* Saf4+, Chrome */
  background-image: -webkit-linear-gradient($angle, $gradient1, $gradient2); /* Chrome 10+, Saf5.1+, iOS 5+ */
  background-image: -moz-linear-gradient($angle, $gradient1, $gradient2); /* FF3.6 */
  background-image: -ms-linear-gradient($angle, $gradient1, $gradient2); /* IE10 */
  background-image: -o-linear-gradient($angle, $gradient1, $gradient2); /* Opera 11.10+ */
  background-image: linear-gradient($angle, $gradient1, $gradient2);
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=$angle,StartColorStr='#{$gradient1}', EndColorStr='#{$gradient2}');
}
// Background clip
@mixin background-clip($parameters) {
  -webkit-background-clip: $parameters;
  -moz-background-clip: $parameters;
  -ms-background-clip: $parameters;
  background-clip: $parameters;
}

// Grayscale
@mixin grayscale($value) {
  -webkit-filter: #{"grayscale(#{$value})"};
  -moz-filter: #{"grayscale(#{$value})"};
  filter: #{"grayscale(#{$value})"};
}

// Edit font
@mixin font($size: false, $colour: false, $weight: false, $lh: false, $ls: false) {
  font-family: "Lato", Helvetica, Arial, sans-serif;
  @if $size {
    font-size: $size;
  }
  @if $colour {
    color: $colour;
  }
  @if $weight {
    font-weight: $weight;
  }
  @if $lh {
    line-height: $lh;
  }
  @if $ls {
    letter-spacing: $ls;
  }
}

//position absolute mixin
@mixin position-absolute($top: null, $right: null, $bottom: null, $left: null) {
  position: absolute;
  top: $top;
  left: $left;
  right: $right;
  bottom: $bottom;
}

@mixin media($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == max {
      $width: $width - 1px;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

// Animate
@mixin animate($name, $duration, $delay, $function, $mode) {
  @include animation-name($name);
  @include animation-duration($duration);
  @include animation-delay($delay);
  @include animation-timing-function($function);
  @include animation-fill-mode($mode);
}

// BUTTONS
@mixin button($name, $bg, $radius) {
  .btn--#{$name} {
    padding: 0.938em 2.5em;
    text-transform: uppercase;
    color: btn-dynamically-text-color($bg);
    background-color: $bg;
    @include border-radius($radius);
    @include button-hover($bg);
  }
}
@mixin button-pulse($name, $bg, $radius) {
  .btn {
    &:hover {
      &::after {
        @include scale(1.4, 1.6);
        @include opacity(0);
      }
    }
    &:link,
    &:visited {
      position: relative;
    }
    &--pulse-#{$name} {
      @extend .btn--#{$name};
      &::after {
        content: "";
        background-color: $bg;
        height: 100%;
        width: 100%;
        z-index: -1;
        @include border-radius($radius);
        @include flexbox;
        @include position-absolute(0, 0);
        @include transition(all 0.15s ease);
      }
    }
  }
}

@mixin button-hover($bg) {
  &:hover {
    background-color: lighten($bg, 5%);
  }
}

@mixin button-size($name, $font-size) {
  .btn--#{$name} {
    font-size: $font-size;
  }
}

@mixin button-bordered($name, $color) {
  .btn--bordered-#{$name} {
    background: rgba(0, 0, 0, 0);
    border: 1px solid $color;
    color: $color;
    padding: 0.938em 2.5em;
    text-transform: uppercase;
    &:hover {
      background: rgba(0, 0, 0, 0);
      color: darken($color, 10%);
      border-color: darken($color, 10%);
    }
  }
}
@mixin button-text($name, $color) {
  .btn--text-#{$name} {
    background: rgba(0, 0, 0, 0);
    border-bottom: 1px solid $color;
    color: $color;
    padding: 4px;
    font-weight: 600;
    margin-top: 1.5rem;
    &:hover {
      color: btn-dynamically-text-color($color);
      background-color: $color;
    }
  }
}
